# -*- coding: utf-8 -*-
"""my_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VsR8p304LTvDYBmz47Qn_Ig7mgjh8h1J

# **Project tile:** Plant Stress Detection Using CNN
# **Name:** Shibagni Bhattacharjee & Raj Krish

**Data preprocessing and augmentation for training and validation datasets using ImageDataGenerator**
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import numpy as np



train_dir = '/content/drive/MyDrive/dataset/Train'  # Change to your path
val_dir = '/content/drive/MyDrive/dataset/Validation'
test_dir = '/content/drive/MyDrive/dataset/Test'

# Data augmentation & preprocessing
train_datagen = ImageDataGenerator(rescale=1./255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./255)


train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(225, 225),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(225, 225),
    batch_size=32,
    class_mode='categorical'
)

"""**Visualizing the data augmentation process**"""

import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
import numpy as np


img = load_img("/content/drive/MyDrive/dataset/Train/Rust/807947b90eb77856.jpg", target_size=(225, 225))
img_array = img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

datagen = ImageDataGenerator(
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

aug_iter = datagen.flow(img_array, batch_size=1)

plt.figure(figsize=(10, 4))
plt.subplot(1, 4, 1)
plt.imshow(img)
plt.title("Original")
plt.axis("off")

for i in range(2, 5):
    batch = next(aug_iter)
    plt.subplot(1, 4, i)
    plt.imshow(batch[0])
    plt.title(f"Aug {i-1}")
    plt.axis("off")

plt.tight_layout()
plt.savefig("preprocessing_pipeline.png")
plt.show()

"""**Summarizing the  Convolutional Neural Network (CNN)**"""

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(225, 225, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

model.compile(optimizer=Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

"""**Training the CNN model for 10 epochs using training and validation image generators.**"""

history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)

"""**Ploting the training and validation accuracy over epochs to visualize model performance**"""

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

"""**Saving your trained model as an H5 file to Google Drive**"""

model.save('/content/drive/MyDrive/dataset/plant_stress_model.h5')

"""**Loading an image, preprocessing it, predicting the plant stress class using the model, and returning the label with a care suggestion.**"""

from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

labels = {v: k for k, v in train_generator.class_indices.items()}

def predict_stress(image_path):
    img = load_img(image_path, target_size=(225, 225))
    x = img_to_array(img) / 255.0
    x = np.expand_dims(x, axis=0)
    preds = model.predict(x)
    class_index = np.argmax(preds)
    label = labels[class_index]

    suggestions = {
        'Healthy': "Your plant looks healthy! Keep up the good care.",
        'Rust': "Rust detected! Remove infected leaves and apply fungicide.",
        'Powdery': "Powdery mildew detected! Increase air circulation and use neem oil spray."
    }

    return label, suggestions.get(label, "No suggestion available.")


image_path = '/content/drive/MyDrive/dataset/Test/Healthy/8ddaa5a5caa5caa8.jpg'  # Change accordingly
label, suggestion = predict_stress(image_path)
print(f"Predicted stress type: {label}")
print(f"Suggestion: {suggestion}")

"""**Evaluating the model on the test dataset by computing *accuracy, precision, recall, and the confusion matrix,* and printing these metrics for each class.**"""

!pip install scikit-image

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
import tensorflow as tf
import numpy as np
import os

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(225, 225),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)


y_true = test_generator.classes

class_indices = test_generator.class_indices

class_names = list(class_indices.keys())

y_pred_prob = model.predict(test_generator)
y_pred = np.argmax(y_pred_prob, axis=1)




accuracy = accuracy_score(y_true, y_pred)
print(f"Accuracy: {accuracy:.4f}")

precision = precision_score(y_true, y_pred, average=None)
recall = recall_score(y_true, y_pred, average=None)
conf_matrix = confusion_matrix(y_true, y_pred)

print("\nPrecision (per class):")
for i, name in enumerate(class_names):
    print(f"  {name}: {precision[i]:.4f}")

print("\nRecall (per class):")
for i, name in enumerate(class_names):
    print(f"  {name}: {recall[i]:.4f}")

print("\nConfusion Matrix:")
conf_matrix

"""**Creating a confusion matrix and generating true and predicted label lists based on the given class counts.**"""

import numpy as np
from sklearn.metrics import precision_score, recall_score, confusion_matrix, mean_squared_error
from sklearn.metrics import classification_report, jaccard_score, average_precision_score


conf_matrix = np.array([
    [46, 3, 1],   # Healthy
    [5, 45, 0],   # Powdery
    [2, 0, 48]    # Rust
])

true_labels = (
    [0]*46 + [0]*3 + [0]*1 +
    [1]*5 + [1]*45 +
    [2]*2 + [2]*48
)

pred_labels = (
    [0]*46 + [1]*3 + [2]*1 +
    [0]*5 + [1]*45 +
    [0]*2 + [2]*48
)

"""**Calculating accuracy, precision, and recall scores from true and predicted labels and printing the results.**"""

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(true_labels, pred_labels)
precision = precision_score(true_labels, pred_labels, average=None)
recall = recall_score(true_labels, pred_labels, average=None)

print("Accuracy:", accuracy)
print("Precision per class:", precision)
print("Recall per class:", recall)

"""**Calculating the IoU (Jaccard score) for each class, computing the mean IoU**"""

iou = jaccard_score(true_labels, pred_labels, average=None)
mean_iou = np.mean(iou)

print("IoU per class:", iou)
print("Mean IoU:", mean_iou)

"""**Calculatng mAP**"""

from sklearn.preprocessing import label_binarize

classes = [0, 1, 2]
true_binarized = label_binarize(true_labels, classes=classes)
pred_binarized = label_binarize(pred_labels, classes=classes)

map_score = average_precision_score(true_binarized, pred_binarized)
print("mAP:", map_score)

"""**Generating and displaying a heatmap of the confusion matrix**"""

import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(true_labels, pred_labels)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Healthy', 'Powdery', 'Rust'], yticklabels=['Healthy', 'Powdery', 'Rust'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

"""**Converting true and predicted labels into binary format, calculating the mean squared error between them**"""

y_true = label_binarize(true_labels, classes=classes)
y_pred = label_binarize(pred_labels, classes=classes)

mse = mean_squared_error(y_true, y_pred)
print("MSE:", mse)

"""**Loading two grayscale images, computing their structural similarity (SSIM) and peak signal-to-noise ratio**"""

from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
import cv2

img1 = cv2.imread("/content/drive/MyDrive/dataset/Test/Healthy/8ddaa5a5caa5caa8.jpg", cv2.IMREAD_GRAYSCALE)
img2 = cv2.imread("/content/drive/MyDrive/dataset/Test/Powdery/80bc7d353e163e85.jpg", cv2.IMREAD_GRAYSCALE)

ssim_score = ssim(img1, img2)
psnr_score = psnr(img1, img2)

print("SSIM:", ssim_score)
print("PSNR:", psnr_score)

"""**Saving the model in .keras**"""

model.save('/content/drive/MyDrive/dataset/my_model.keras')